(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{886:function(e,t,i){"use strict";i.r(t),i.d(t,"default",(function(){return c}));var a=i(18),n=i.n(a),r=i(22),s=i.n(r),o=(i(0),i(282)),l={};function c(e){var t=e.components,i=s()(e,["components"]);return Object(o.mdx)("wrapper",n()({},l,i,{components:t,mdxType:"MDXLayout"}),Object(o.mdx)("h1",{id:"webdriverio-testing"},"WebDriverIO Testing"),Object(o.mdx)("p",null,"The terra-functional-testing library is a utility for developing automation tests. The library extends the ",Object(o.mdx)("a",n()({parentName:"p"},{href:"https://webdriver.io/"}),"WebdriverIO Framework")," to facilitate automating accessibility and functional testing for Terra projects."),Object(o.mdx)("h2",{id:"viewports"},"Viewports"),Object(o.mdx)("p",null,"Tests can be executed in any of the following supported viewports:"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"'tiny' - width: 470; height: 768"),Object(o.mdx)("li",{parentName:"ul"},"'small' - width: 622; height: 768"),Object(o.mdx)("li",{parentName:"ul"},"'medium' - width: 838; height: 768"),Object(o.mdx)("li",{parentName:"ul"},"'large' - width: 1000; height: 768"),Object(o.mdx)("li",{parentName:"ul"},"'huge' - width: 1300; height: 768"),Object(o.mdx)("li",{parentName:"ul"},"'enormous' - width: 1500; height: 768")),Object(o.mdx)("h3",{id:"terradescribeviewports"},"Terra.describeViewports"),Object(o.mdx)("p",null,Object(o.mdx)("inlineCode",{parentName:"p"},"Terra.describeViewports")," is a top level ",Object(o.mdx)("inlineCode",{parentName:"p"},"describe")," block for the spec file. All tests within this block will be executed for each given viewport(s). This block should not be nested within itself. If tests need to run against different viewports, then they should be created under a separate top level ",Object(o.mdx)("inlineCode",{parentName:"p"},"Terra.describeViewports")," block. Only the above Terra defined viewports are supported. 'huge' is the default viewport. If a form factor is defined in the wdio configuration or environment variable, that form factor will supersede the viewports defined in this block. This block accepts these arguments in the following order:"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"{string} title - The ",Object(o.mdx)("inlineCode",{parentName:"li"},"describe")," block title."),Object(o.mdx)("li",{parentName:"ul"},"{string[]} viewports - The list of Terra viewports to test."),Object(o.mdx)("li",{parentName:"ul"},"{function} - the test function to execute for each viewport.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",n()({parentName:"pre"},{className:"language-js"}),"Terra.describeViewports('Test viewports', ['tiny', 'huge'], () => {\n  it('test tiny and huge screens', () => {\n    browser.url('/testing/route/');\n    Terra.validates.screenshot();\n  });\n});\n")),Object(o.mdx)("h2",{id:"accessibility-testing"},"Accessibility Testing"),Object(o.mdx)("p",null,"The testing library integrates ",Object(o.mdx)("a",n()({parentName:"p"},{href:"https://github.com/dequelabs/axe-core"}),"axe-core")," into the testing framework to help automate accessibility testing along side functional testing."),Object(o.mdx)("p",null,"Axe will analyze the entire document when run and report accessibility violations. The following ",Object(o.mdx)("a",n()({parentName:"p"},{href:"https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#axe-core-tags"}),"tags")," are enabled ",Object(o.mdx)("inlineCode",{parentName:"p"},"wcag2a"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"wcag2aa"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"wcag21aa"),", and ",Object(o.mdx)("inlineCode",{parentName:"p"},"section508"),". Each tag has an associated list of ",Object(o.mdx)("a",n()({parentName:"p"},{href:"https://github.com/dequelabs/axe-core/blob/develop/doc/rule-descriptions.md"}),"rules")," that will be checked against the document when axe is run."),Object(o.mdx)("p",null,"Please note that not all accessibility testing can be automated. Axe provides a lightweight static analysis of the entire document to catch common accessibility violations, but it is the responsibility of each team and application to do thorough accessibility and functional testing manually when necessary. "),Object(o.mdx)("h3",{id:"terravalidatesaccessibility"},"Terra.validates.accessibility"),Object(o.mdx)("p",null,"The accessibility assertion is available globally. Invoking the assertion will run accessibility checks on the entire document. If accessibility violations are found the test step will fail. It is recommended to run accessibility checks at various steps in a functional workflow to check for violations at different stages of the application."),Object(o.mdx)("pre",null,Object(o.mdx)("code",n()({parentName:"pre"},{className:"language-js"}),"it('should report no accessibility violations', () => {\n  browser.url('/testing/route/');\n\n  Terra.validates.accessibility(); // Fails if accessibility violations are found anywhere on the document.\n});\n")),Object(o.mdx)("p",null,"The accessibility assertion accepts ",Object(o.mdx)("a",n()({parentName:"p"},{href:"https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter"}),"options")," that will be passed to axe for the document analysis."),Object(o.mdx)("pre",null,Object(o.mdx)("code",n()({parentName:"pre"},{className:"language-js"}),"it('should override a rule configuration', () => {\n  browser.url('/testing/route/');\n\n  // Rule override for this specific test.\n  const options = { rules: { 'color-contrast': { enabled: false } } };\n\n  Terra.validates.accessibility(options);\n});\n")),Object(o.mdx)("h2",{id:"input-caret"},"Input Caret"),Object(o.mdx)("h3",{id:"terrahideinputcaret"},"Terra.hideInputCaret"),Object(o.mdx)("p",null,"An editable text field in focus will have a blinking caret. Often times this blinking caret causes inconsistent test failures due to the blinking of the caret during screenshot capture. This situation can be avoided by using ",Object(o.mdx)("inlineCode",{parentName:"p"},"Terra.hideInputCaret")," to set the CSS caret color to of the element to be transparent. This method must be placed in a ",Object(o.mdx)("inlineCode",{parentName:"p"},"before"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"beforeEach"),", or ",Object(o.mdx)("inlineCode",{parentName:"p"},"it")," block or it will not be ran. This method accepts a selector string as an argument and will only apply to the first selector if multiple are found. The caret will automatically be hidden for body every time the page loads or refreshes."),Object(o.mdx)("pre",null,Object(o.mdx)("code",n()({parentName:"pre"},{className:"language-js"}),"it('should hide the caret', () => {\n  Terra.hideInputCaret('#inputID');\n  const element = browser.element('#inputID');\n\n  expect(element.getCssProperty('caretColor').value).to.equal('rgba(0,0,0,0)');\n});\n")))}c.isMDXComponent=!0}}]);