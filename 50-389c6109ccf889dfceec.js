(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{884:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return m}));var r=t(18),a=t.n(r),i=t(22),c=t.n(i),o=(t(0),t(282)),d={};function m(e){var n=e.components,t=c()(e,["components"]);return Object(o.mdx)("wrapper",a()({},d,t,{components:n,mdxType:"MDXLayout"}),Object(o.mdx)("h1",{id:"terra-service"},"Terra Service"),Object(o.mdx)("p",null,"The Terra service integrates ",Object(o.mdx)("a",a()({parentName:"p"},{href:"https://github.com/dequelabs/axe-core"}),"axe accessibility")," testing into the test environment. Invoking the axe engine will perform a static analysis of the current document and dom structure. The axe analysis runs accessibility checks against ",Object(o.mdx)("inlineCode",{parentName:"p"},"wcag2a"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"wcag2aa"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"wcag21aa"),", and ",Object(o.mdx)("inlineCode",{parentName:"p"},"section508")," standards."),Object(o.mdx)("h2",{id:"installation"},"Installation"),Object(o.mdx)("p",null,"The Terra service should be installed as a development dependency."),Object(o.mdx)("pre",null,Object(o.mdx)("code",a()({parentName:"pre"},{className:"language-bash"}),"npm install --save-dev @cerner/terra-functional-testing\n")),Object(o.mdx)("h2",{id:"configuration"},"Configuration"),Object(o.mdx)("p",null,"To use the service it must be added to the services array in the ",Object(o.mdx)("inlineCode",{parentName:"p"},"wdio.conf.js")," file."),Object(o.mdx)("pre",null,Object(o.mdx)("code",a()({parentName:"pre"},{className:"language-js"}),"// wdio.conf.js\nconst TerraService = require('@cerner/terra-functional-testing/lib/services/wdio-terra-service');\n\nexport.config = {\n    // ...\n    services: [\n        [TerraService, {\n            // Terra service options here\n            // ...\n        }]\n    ],\n    // ...\n};\n")),Object(o.mdx)("h2",{id:"options"},"Options"),Object(o.mdx)("h3",{id:"formfactor"},"formFactor"),Object(o.mdx)("p",null,"Tests can be executed in a specific form factor by setting the ",Object(o.mdx)("inlineCode",{parentName:"p"},"formFactor")," configuration option or the ",Object(o.mdx)("inlineCode",{parentName:"p"},"FORM_FACTOR")," environment variable . The form factors can be any of the following supported viewports: ",Object(o.mdx)("inlineCode",{parentName:"p"},"tiny"),"; ",Object(o.mdx)("inlineCode",{parentName:"p"},"small"),"; ",Object(o.mdx)("inlineCode",{parentName:"p"},"medium"),"; ",Object(o.mdx)("inlineCode",{parentName:"p"},"large"),"; ",Object(o.mdx)("inlineCode",{parentName:"p"},"huge"),"; ",Object(o.mdx)("inlineCode",{parentName:"p"},"enormous"),". In order for the tests to run in this form factor, it must be one that is already specified in the ",Object(o.mdx)("inlineCode",{parentName:"p"},"Terra.describeViewport")," block. "),Object(o.mdx)("p",null,"Type: ",Object(o.mdx)("inlineCode",{parentName:"p"},"String")),Object(o.mdx)("p",null,"Required: ",Object(o.mdx)("inlineCode",{parentName:"p"},"false")),Object(o.mdx)("p",null,"Default: ",Object(o.mdx)("inlineCode",{parentName:"p"},"undefined")),Object(o.mdx)("p",null,"Examples:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",a()({parentName:"pre"},{className:"language-js"}),'"FORM_FACTOR=huge npm run test:wdio"\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",a()({parentName:"pre"},{className:"language-js"}),"// wdio.conf.js\nconst TerraService = require('@cerner/terra-functional-testing/lib/services/wdio-terra-service');\n\nexport.config = {\n    // ...\n    services: [\n        [TerraService, {\n          formFactor: 'huge',\n        }]\n    ],\n    // ...\n};\n")),Object(o.mdx)("h3",{id:"theme"},"theme"),Object(o.mdx)("p",null,"An optional theme name that will be used to configure the testing environment. This option will flex the axe-core rules used during testing to account for the current theme."),Object(o.mdx)("p",null,"Type: ",Object(o.mdx)("inlineCode",{parentName:"p"},"string")),Object(o.mdx)("p",null,"Required: ",Object(o.mdx)("inlineCode",{parentName:"p"},"false")),Object(o.mdx)("p",null,"Default: ",Object(o.mdx)("inlineCode",{parentName:"p"},"terra-default-theme")),Object(o.mdx)("p",null,"Example:"),Object(o.mdx)("pre",null,Object(o.mdx)("code",a()({parentName:"pre"},{className:"language-js"}),"// wdio.conf.js\nconst TerraService = require('@cerner/terra-functional-testing/lib/services/wdio-terra-service');\n\nexport.config = {\n    // ...\n    services: [\n        [TerraService, {\n          theme: 'terra-theme-name',\n        }]\n    ],\n    // ...\n};\n")))}m.isMDXComponent=!0}}]);