(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{882:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return o}));var r=t(18),i=t.n(r),c=t(22),a=t.n(c),s=(t(0),t(282)),l={};function o(e){var n=e.components,t=a()(e,["components"]);return Object(s.mdx)("wrapper",i()({},l,t,{components:n,mdxType:"MDXLayout"}),Object(s.mdx)("h1",{id:"asset-server-service"},"Asset Server Service"),Object(s.mdx)("p",null,"The asset server service initializes a server to serve compiled assets to the testing environment."),Object(s.mdx)("h2",{id:"installation"},"Installation"),Object(s.mdx)("p",null,"The asset server service should be installed as a development dependency."),Object(s.mdx)("pre",null,Object(s.mdx)("code",i()({parentName:"pre"},{className:"language-bash"}),"npm install --save-dev @cerner/terra-functional-testing\n")),Object(s.mdx)("h2",{id:"configuration"},"Configuration"),Object(s.mdx)("p",null,"To use the service it must be added to the services array in the ",Object(s.mdx)("inlineCode",{parentName:"p"},"wdio.conf.js")," file."),Object(s.mdx)("pre",null,Object(s.mdx)("code",i()({parentName:"pre"},{className:"language-js"}),"// wdio.conf.js\nconst AssetServerService = require('@cerner/terra-functional-testing/lib/services/wdio-asset-server-service');\n\nexport.config = {\n    // ...\n    services: [\n        [AssetServerService, {\n            // Asset server service options here.\n            // ...\n        }]\n    ],\n    // ...\n};\n")),Object(s.mdx)("h2",{id:"options"},"Options"),Object(s.mdx)("h3",{id:"webpackconfig"},"webpackConfig"),Object(s.mdx)("p",null,"A path to a webpack configuration file."),Object(s.mdx)("p",null,"Note: The ",Object(s.mdx)("inlineCode",{parentName:"p"},"site")," configuration option will take precedence over ",Object(s.mdx)("inlineCode",{parentName:"p"},"webpackConfig")," if both are provided."),Object(s.mdx)("p",null,"Type: ",Object(s.mdx)("inlineCode",{parentName:"p"},"string")),Object(s.mdx)("p",null,"Required: ",Object(s.mdx)("inlineCode",{parentName:"p"},"false")),Object(s.mdx)("p",null,"Default: The asset server service will check the current working directory for a ",Object(s.mdx)("inlineCode",{parentName:"p"},"webpack.config.js")," file."),Object(s.mdx)("p",null,"Example:"),Object(s.mdx)("pre",null,Object(s.mdx)("code",i()({parentName:"pre"},{className:"language-js"}),"// wdio.conf.js\nconst AssetServerService = require('@cerner/terra-functional-testing/lib/services/wdio-asset-server-service');\n\nexport.config = {\n    // ...\n    services: [\n        [AssetServerService, {\n          webpackConfig: './path/webpack.config.js'\n        }]\n    ],\n    // ...\n};\n")),Object(s.mdx)("h3",{id:"locale"},"locale"),Object(s.mdx)("p",null,"Note: The locale will only be applied when providing a webpack configuration. The locale will not be used for ",Object(s.mdx)("inlineCode",{parentName:"p"},"site")," configuration."),Object(s.mdx)("p",null,"An optional locale that will be passed into the webpack configuration as an environment variable."),Object(s.mdx)("p",null,"Type: ",Object(s.mdx)("inlineCode",{parentName:"p"},"string")),Object(s.mdx)("p",null,"Required: ",Object(s.mdx)("inlineCode",{parentName:"p"},"false")),Object(s.mdx)("p",null,"Default: ",Object(s.mdx)("inlineCode",{parentName:"p"},"undefined")),Object(s.mdx)("p",null,"Example:"),Object(s.mdx)("pre",null,Object(s.mdx)("code",i()({parentName:"pre"},{className:"language-js"}),"// wdio.conf.js\nconst AssetServerService = require('@cerner/terra-functional-testing/lib/services/wdio-asset-server-service');\n\nexport.config = {\n    // ...\n    services: [\n        [AssetServerService, {\n          locale: 'en-US',\n        }]\n    ],\n    // ...\n};\n")),Object(s.mdx)("h3",{id:"port"},"port"),Object(s.mdx)("p",null,"The port the service will be hosted on."),Object(s.mdx)("p",null,"Type: ",Object(s.mdx)("inlineCode",{parentName:"p"},"number")),Object(s.mdx)("p",null,"Required: ",Object(s.mdx)("inlineCode",{parentName:"p"},"false")),Object(s.mdx)("p",null,"Default: ",Object(s.mdx)("inlineCode",{parentName:"p"},"8080")),Object(s.mdx)("p",null,"Example:"),Object(s.mdx)("pre",null,Object(s.mdx)("code",i()({parentName:"pre"},{className:"language-js"}),"// wdio.conf.js\nconst AssetServerService = require('@cerner/terra-functional-testing/lib/services/wdio-asset-server-service');\n\nexport.config = {\n    // ...\n    services: [\n        [AssetServerService, {\n          port: 8080,\n        }]\n    ],\n    // ...\n};\n")),Object(s.mdx)("h3",{id:"site"},"site"),Object(s.mdx)("p",null,"A relative path to a directory of static assets. If provided, an express server will be launched to serve the directory assets."),Object(s.mdx)("p",null,"Note: The ",Object(s.mdx)("inlineCode",{parentName:"p"},"site")," configuration option will take precedence over ",Object(s.mdx)("inlineCode",{parentName:"p"},"webpackConfig")," if both are provided."),Object(s.mdx)("p",null,"Type: ",Object(s.mdx)("inlineCode",{parentName:"p"},"string")),Object(s.mdx)("p",null,"Required: ",Object(s.mdx)("inlineCode",{parentName:"p"},"false")),Object(s.mdx)("p",null,"Default: ",Object(s.mdx)("inlineCode",{parentName:"p"},"undefined")),Object(s.mdx)("p",null,"Example:"),Object(s.mdx)("pre",null,Object(s.mdx)("code",i()({parentName:"pre"},{className:"language-js"}),"// wdio.conf.js\nconst AssetServerService = require('@cerner/terra-functional-testing/lib/services/wdio-asset-server-service');\n\nexport.config = {\n    // ...\n    services: [\n        [AssetServerService, {\n          site: './build',\n        }]\n    ],\n    // ...\n};\n")),Object(s.mdx)("h3",{id:"theme"},"theme"),Object(s.mdx)("p",null,"Note: The theme will only be applied when providing a webpack configuration. The theme will not be used for ",Object(s.mdx)("inlineCode",{parentName:"p"},"site")," configuration."),Object(s.mdx)("p",null,"An optional theme that will be passed into the webpack configuration as an environment variable."),Object(s.mdx)("p",null,"Type: ",Object(s.mdx)("inlineCode",{parentName:"p"},"string")),Object(s.mdx)("p",null,"Required: ",Object(s.mdx)("inlineCode",{parentName:"p"},"false")),Object(s.mdx)("p",null,"Default: ",Object(s.mdx)("inlineCode",{parentName:"p"},"terra-default-theme")),Object(s.mdx)("p",null,"Example:"),Object(s.mdx)("pre",null,Object(s.mdx)("code",i()({parentName:"pre"},{className:"language-js"}),"// wdio.conf.js\nconst AssetServerService = require('@cerner/terra-functional-testing/lib/services/wdio-asset-server-service');\n\nexport.config = {\n    // ...\n    services: [\n        [AssetServerService, {\n          theme: 'terra-theme-name',\n        }]\n    ],\n    // ...\n};\n")))}o.isMDXComponent=!0}}]);