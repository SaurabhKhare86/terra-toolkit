(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{869:function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var a=n(0),o=n.n(a),r=n(870),i=n.n(r),c=function(e){var t=e.url;return o.a.createElement(i.a,{src:"https://github.com/cerner/terra-toolk/tree/main/packages/webpack-config-terra",name:"@cerner/webpack-config-terra",version:"1.0.0-alpha.1",url:t})}},870:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=c(n(0)),o=c(n(1)),r=c(n(3)),i=c(n(871));function c(e){return e&&e.__esModule?e:{default:e}}var d=r.default.bind(i.default),s={name:o.default.string.isRequired,src:o.default.string,url:o.default.string,version:o.default.string.isRequired},m=function(e){var t=e.src,n=e.name,o=e.url,r=e.version,i=a.default.createElement("a",{className:d("badge"),href:o||"https://www.npmjs.org/package/".concat(n,"/v/").concat(r)},a.default.createElement("span",{className:d("badge-name")},o?"package":"npm"),a.default.createElement("span",{className:d("badge-version")},"v".concat(r))),c=t?a.default.createElement("a",{className:d("badge"),href:t},a.default.createElement("span",{className:d("badge-name")},"github"),a.default.createElement("span",{className:d("badge-version")},"source")):void 0;return a.default.createElement("div",{className:d("badge-container")},i,c)};m.propTypes=s;var p=m;t.default=p},871:function(e,t,n){e.exports={badge:"Badges-module__badge___3m7y2","badge-container":"Badges-module__badge-container___1YxI5","badge-name":"Badges-module__badge-name___BQ3u4","badge-version":"Badges-module__badge-version___3OgwS"}},892:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return m}));var a=n(18),o=n.n(a),r=n(22),i=n.n(r),c=(n(0),n(282)),d=n(869),s={};function m(e){var t=e.components,n=i()(e,["components"]);return Object(c.mdx)("wrapper",o()({},s,n,{components:t,mdxType:"MDXLayout"}),Object(c.mdx)(d.a,{mdxType:"Badge"}),Object(c.mdx)("h1",{id:"webpack-config-terra-upgrade-guide"},"webpack-config-terra Upgrade Guide"),Object(c.mdx)("h2",{id:"changes-from-terra-toolkit-6x--to-cernerwebpack-config-terra-100"},"Changes from terra-toolkit 6.x  to @cerner/webpack-config-terra 1.0.0"),Object(c.mdx)("p",null,"We have broken terra-toolkit up into several component parts de-couple major version upgrades to unrelated components. Upgrading WDIO shouldn't affect our webpack version and vice versa."),Object(c.mdx)("p",null,"The webpack config formerly housed in terra toolkit has been migrated to it's own package ",Object(c.mdx)("inlineCode",{parentName:"p"},"@cerner/webpack-config-terra"),"."),Object(c.mdx)("p",null,"To upgrade change dependency and change how you are requiring the config."),Object(c.mdx)("pre",null,Object(c.mdx)("code",o()({parentName:"pre"},{className:"language-diff"}),"- const webpackConfig = require('terra-dev-site/config/webpack/webpack.config');\n+ const webpackConfig = require('@cerner/webpack-config-terra');\n")),Object(c.mdx)("h3",{id:"removed-raf"},"Removed RAF"),Object(c.mdx)("p",null,"Previously we provided the requestAnimationFrame polyfill but have determined it doesn't need to be polyfilled of our supported browsers. See ",Object(c.mdx)("a",o()({parentName:"p"},{href:"https://caniuse.com/requestanimationframe"}),"caniuse.com"),". This should not affect your application."),Object(c.mdx)("h3",{id:"removed-aggregate-themes"},"Removed Aggregate themes"),Object(c.mdx)("p",null,"When components adhere to the new themeing strategy, aggregate themes is no longer needed. The latest version of all terra components have ben updated to the new strategy, you can tell by checking the theme variable css files are imported directly into the components css file."),Object(c.mdx)("h3",{id:"themeconfig-moved-from-env-to-options"},"themeConfig moved from env to options"),Object(c.mdx)("p",null,"Theme config can be set in three ways. Through the THEME env, by adding a themeConfig option to the env variable when extended through javascript or by setting adding a terra-theme.config.js file to your package root."),Object(c.mdx)("p",null,"Using the terra-theme.config.js file is the preferred method of configuring themes, but in some cases like ci and building multiple sites with one webpack config. The method of adding the themeConfig option to the env variable is kind of weird since the env object is generally reserved for environment variable set through webpack and not objects. To address this we've added an additional options object that can optionally be passed in to the webpack config."),Object(c.mdx)("pre",null,Object(c.mdx)("code",o()({parentName:"pre"},{className:"language-diff"}),"const webpackConfig = require('webpack-config-terra');\n\nconst themeConfig = {\n  theme: 'terra-dark-theme',\n};\n\n-+module.exports = webpackConfig({themeConfig}, {});\n+module.exports = webpackConfig({}, {}, {themeConfig});\n\n")),Object(c.mdx)("h3",{id:"removed-aggregateoptions-from-env"},"Removed aggregateOptions from env"),Object(c.mdx)("p",null,"Similar the env theme config, aggregateOptions was an object added to the env object. Unlike themeConfig we don't know of anyone using aggregateOptions. Instead of moving it to the ",Object(c.mdx)("inlineCode",{parentName:"p"},"options")," object we just went ahead and removed it. If you have a use case for config, log an issue and we'll see what we can do."),Object(c.mdx)("h3",{id:"deprecating-theme-env-support"},"deprecating THEME env support"),Object(c.mdx)("p",null,"To consolidate our api the THEME env variable is now supplied as the webpack env option ",Object(c.mdx)("inlineCode",{parentName:"p"},"defaultTheme"),". For the timebeing both are supported but the THEME env will be removed in the next major version of webpack-config-terra."),Object(c.mdx)("pre",null,Object(c.mdx)("code",o()({parentName:"pre"},{className:"language-diff"}),'"scripts": {\n-    "pack": "THEME=terra-dark-theme webpack"\n+    "pack": "webpack --env.defaultTheme=terra-dark-theme"\n}\n')))}m.isMDXComponent=!0}}]);